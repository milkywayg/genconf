" Michael vimrc

set nocompatible
syntax on

"========== Plug In management ========="
" Vundle begins here; turn off filetype temporarily
" set the runtime path to include Vundle and initialize
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" plugins
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'tpope/vim-surround'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'scrooloose/nerdcommenter'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-markdown'
Plugin 'flazz/vim-colorschemes'
Plugin 'nvie/vim-flake8'
Plugin 'bronson/vim-trailing-whitespace'
Plugin 'leafgarland/typescript-vim'
Plugin 'othree/javascript-libraries-syntax.vim'
Plugin 'pangloss/vim-javascript'
Plugin 'bling/vim-bufferline'
Plugin 'jlanzarotta/bufexplorer'
Plugin 'Align'
Plugin 'Lokaltog/powerline'   " Powerline fonts plugin
Plugin 'majutsushi/tagbar'    " Class/module browser

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

call vundle#end()
"========== End plug In management ======"


"=========== General config ========"
filetype plugin indent on

set term=screen-256color
" colorscheme PaperColor

let python_highlight_all=1

set autoindent
set bg=dark
set backspace=indent,eol,start
set expandtab
set ignorecase
set incsearch
set laststatus=2
set linebreak
set nobackup
set noerrorbells
set nolist
set noswapfile
set novb
set nowrap
set number
set relativenumber
set ruler
set scrolloff=10
set showmatch
set shiftwidth=4
set shortmess=I
set showcmd
set showmode
set sidescroll=1
set sidescrolloff=7
set smartcase
set softtabstop=4
set undolevels=1000
set nrformats-=octal
set title
" set background=dark
set ttyfast
set lazyredraw


highlight ColorColumn ctermbg=black
set colorcolumn=80

"CtrlP
let g:ctrlp_map = '<c-p>'

" ========================================================================================
" VIM-airline  plugin
" https://github.com/bling/vim-airline   
" let g:airline_theme='tomorrow'
let g:airline_theme='luna'
" let g:airline_theme           = 'badwolf'
" let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
" au WinEnter :AirlineRefresh
" au BufWinEnter :AirlineRefresh
" let g:airline_powerline_fonts = 1
" ========================================================================================


"NERDTree
map <C-n> :NERDTreeToggle<CR>

" "Gvim mods
" set encoding=utf-8
" set hidden
" set history=100
" set mouse=a
"
" set guioptions-=m
" set guioptions-=T
" set guioptions-=r
" set guioptions-=Lo

"nerd-commenter settings
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code
" indentation
let g:NERDDefaultAlign = 'left'

" Allow commenting and inverting empty lines (useful when commenting a
" region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1


"see hidden files in nerdtree
let NERDTreeShowHidden=1

nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Remove all trailing whitespace by pressing F4
noremap <F4> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>

" Set ctrl+S as save
" inoremap <c-s> <c-o>:update<CR>

" my addings
" Highlight search results
"  set hlsearch

" Mappings
let mapleader=","
" nnoremap <Leader>b :bp<CR>
" nnoremap <Leader>f :bn<CR>
" nnoremap     <M-l> : so %<CR>
nnoremap <Leader>R             : %s/
nnoremap <Leader>r             : .,$s/
"nnoremap <M-b>                : b
"nnoremap <M-p>                : b#<CR>
"nnoremap <Leader>c            : bd<CR>
nnoremap <silent> <leader>c    : lclose<bar>b#<bar>bd #<CR>
nnoremap <F5>                  : ls<CR>: b
nnoremap <Leader>u             : noh<CR>
nnoremap <silent> <Leader>h ml : execute 'match Search /\%'.line('.').'l/'<CR>
nnoremap <silent> <Leader>g    : call clearmatches()<CR>
nnoremap <F8>                  : diffupdate<CR>
nnoremap <F6>                  : diffthis<CR>
nnoremap <F7>                  : diffoff<CR>

nnoremap <M-g>                 : %!grep
"comment-uncomment
vnoremap <Leader>9             : norm i#<CR>
vnoremap <Leader>8             : norm ^x<CR>

" toggle easily paste mode
nnoremap <silent><Leader>0:set invpaste paste?<CR>
set pastetoggle=<Leader>0
set showmode

" remap :w save with Leader s
nnoremap <leader>s :w<cr>
inoremap <leader>s <C-c>:w<cr>

"Align Current Paragraph with Leader + a
noremap <leader>a =ip

" Buffers - explore/next/previous: Alt-F12, F12, Shift-F12.
nnoremap <silent> <F12>     : BufExplorer<CR>
nnoremap <silent> !         : bp<CR>
nnoremap <silent> @         : bn<CR>
nnoremap <silent> <Leader>q : bp<CR>
nnoremap <silent> <Leader>w : bn<CR>

" quick select in normla mode with 8
noremap  8 *<S-n>
nnoremap <F2> : /\<<C-r><C-w>\><CR>N

" noremap <silent> <C-S>      :update<CR>
" vnoremap <silent><C-S>     <C-C>:update<CR>
" inoremap <silent><C-S>     <C-O>:update<CR>

" Map ESC to jj
imap jj <ESC>

 " Wildmenu
set wildmenu
set wildmode=longest,list
if has("wildmenu")
   set wildignore+=*.a,*.o
   set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
   set wildignore+=.DS_Store,.git,.hg,.svn
   set wildignore+=*~,*.swp,*.tmp
   " set wildmode=list:longest
   set wildignore+=.hg,.git,.svn " Version Controls"
   set wildignore+=*.aux,*.out,*.toc "Latex Indermediate files"
   set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg "Binary Imgs"
   set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest "Compiled Object files"
   set wildignore+=*.spl "Compiled speolling world list"
   set wildignore+=*.sw? "Vim swap files"
   set wildignore+=*.DS_Store "OSX SHIT"
   set wildignore+=*.luac "Lua byte code"
   set wildignore+=migrations "Django migrations"
   set wildignore+=*.pyc "Python Object codes"
   set wildignore+=*.orig,*.rej "Merge resolution files"
endif

" Add possibility to resize the panes with mouse
set mouse+=a
if &term =~ '^screen'
    " tmux knows the extended mouse mode
    set ttymouse=xterm2
endif

"go to new pane after aplitting
set splitbelow
set splitright

" hyphen part of a word
set iskeyword+=-

" Yank in the system clipboard -- dont know if this does something
set clipboard=unnamedplus

" in xterm to change the cursor in insert mode
"
"
"let &t_SI = "\<Esc>[6 q"
"let &t_SR = "\<Esc>[4 q"
"let &t_EI = "\<Esc>[2 q"

"if &term =~ "xterm\\|rxvt"
"  " use an orange cursor in insert mode
"  let &t_SI = "\<Esc>]12;orange\x7"
"  " use a red cursor otherwise
"  let &t_EI = "\<Esc>]12;red\x7"
"  silent !echo -ne "\033]12;red\007"
"  " reset cursor when vim exits
"  autocmd VimLeave * silent !echo -ne "\033]112\007"
"  " use \003]12;gray\007 for gnome-terminal and rxvt up to version 9.21
"endif

" =========== Gvim Settings =============

" Removing scrollbars
if has("gui_running")
    set guitablabel=%-0.12t%M
    set guioptions-=T
    set guioptions-=r
    set guioptions-=L
    set guioptions+=a
    set guioptions-=m
    "colo badwolf
    colo desert
    set listchars=tab:▸\ ,eol:¬         " Invisibles using the Textmate style
else
    set t_Co=256
    " colorscheme desert 
    colorscheme inkpot 
    " colorschem badwolf
    " colorscheme iceberg
endif

" if has("gui_running")
"     if has("gui_gtk2")
"         set guifont=Inconsolata\ for\ Powerline\ Medium\ 16
"         colorscheme iceberg
"     endif
" endif
" ========== END Gvim Settings ==========

"==========================================================================="
" Set vim to save the file on focus out.
au FocusLost * :wa
"==========================================================================="
" Redraw screen every time when focus gained
" au FocusGained * :redraw!
"==========================================================================="

"==========================================================================="
" Working with split screen nicely
" Resize Split When the window is resized"
au VimResized * :wincmd =
"==========================================================================="

"==========================================================================="
" Make Sure that Vim returns to the same line when we reopen a file"
augroup line_return
    au!
    au BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \ execute 'normal! g`"zvzz' |
                \ endif
augroup END
"==========================================================================="

"
"==========================================================================="
" Map copy delete and paste to system clipboard
"
vmap <Leader>y "+y
vmap <Leader>d "+d

nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

"==========================================================================="
" double leader for selection whole line
nmap <leader>v v
"==========================================================================="

"=====================================================
"" TagBar settings
"=====================================================
let g:tagbar_autofocus=0
let g:tagbar_width=42
" autocmd BufEnter *.py :call tagbar#autoopen(0)
" autocmd BufWinLeave *.py :TagbarClose


"================================
" Fix color issue in tmux
"================================
" set t_8f=^[[38;2;%lu;%lu;%lum  " Needed in tmux
" set t_8b=^[[48;2;%lu;%lu;%lum  " Ditto


"==========================================================================="
" Save and load session
"
" map <leader>ss :SessionSaveAs user_auto_saved_session<cr>:NERDTree .<cr>
" map <leader>so :SessionOpen user_auto_saved_session<cr><C-d><C-d>,n:NERDTree .<cr>

"==========================================================================="


"===================================================================================================
" Commenting blocks of code.
autocmd FileType c,cppva,scala    let b:comment_leader = '// '
autocmd FileType sh,ruby,python   let b:comment_leader = '# '
autocmd FileType conf,fstab       let b:comment_leader = '# '
autocmd FileType tex              let b:comment_leader = '% '
autocmd FileType mail             let b:comment_leader = '> '
autocmd FileType vim              let b:comment_leader = '" '
noremap <silent> <leader>cc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
noremap <silent> <leader>cu :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>'"'"
" ====================================================================================================


" " ====================================================================================================
" " configure vim bufferline
" " ====================================================================================================
" let g:bufferline_active_buffer_left  = '['
" let g:bufferline_active_buffer_right = ']'
" " let g:bufferline_echo = 1
" " let g:bufferline_modified = '+'
" " " let g:bufferline_echo = 0
" " autocmd VimEnter *
" "   \ let &statusline='%{bufferline#refresh_status()}'
" "     \ .bufferline#get_status_string()

" ========================================================================================
" " Resize split window horizontally and vertically
" Shortcuts to Shift-Alt-Up - Alt is mapped as M in vim
" nmap <S-M-Up> :2winc+<cr>
" imap <S-M-Up> <Esc>:2winc+<cr>i
" nmap <S-M-Down> :2winc-<cr>
" imap <S-M-Down> <Esc>:2winc-<cr>i
"
" nmap <S-M-Left> :2winc><cr>
" imap <S-M-Left> <Esc>:2winc><cr>i
" nmap <S-M-Right> :2winc<<cr>
" imap <S-M-Right> <Esc>:2winc<<cr>i
" ========================================================================================


" ========================================================================================
" " Automatically go to the end of pasted text
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]
" ========================================================================================


" " ========================================================================================
" " VIM-airline  plugin
" " https://github.com/bling/vim-airline   
" let g:airline#extensions#tabline#enabled = 1 
" let g:airline#extensions#tabline#left_sep = ' '
" let g:airline#extensions#tabline#left_alt_sep = '|' 
" 
" function! AirlineInit()
"   " let g:airline_section_a = airline#section#create(['mode'])
"   let g:airline_section_c = airline#section#create(['%F'])
" endfunction
" autocmd VimEnter * call AirlineInit()
" 
" let g:airline_theme_patch_func = 'AirlineThemePatch'
" function! AirlineThemePatch(palette)
"   if g:airline_theme == 'badwolf'
"     for colors in values(a:palette.inactive)
"       let colors[3] = 245
"     endfor
"   endif
" endfunction
" " ========================================================================================


" ========================================================================================
" vimdiff options
" Always use vertical diffs 
set diffopt+=vertical
if &diff 
    colorscheme badwolf_diff
endif
" ========================================================================================



" Highlight search results
set hlsearch


